// Code generated by go-bindata.
// sources:
// res/confirm.tpl
// res/favicon.ico
// res/index.tpl
// res/layout.tpl
// res/repoadd.tpl
// res/repoedit.tpl
// res/useradd.tpl
// res/useredit.tpl
// res/users.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resConfirmTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x4a\xce\xcf\x4b\xcb\x2c\xca\x8d\xcf\x2d\x4e\x57\xb2\xe3\x52\x50\x50\x50\xa8\xae\x56\xd1\xf3\x2d\x4e\x07\xa9\xd3\x4f\xc9\x2c\xb3\xc3\xaa\x3c\xa9\xb4\xa4\x24\x3f\x0f\xaa\xc3\x26\x51\x21\xa3\x28\x35\xcd\x56\x09\xa4\x35\x32\xb5\xb8\xb6\x56\xc9\xee\xf9\xc2\x75\x4f\xd7\xcd\xb2\xd1\x4f\xb4\xe3\x82\x9a\x9a\x99\xa6\x90\x97\xaa\xa0\xa2\xe7\x97\xaf\xa0\x04\x72\x85\x02\x14\xa8\xe5\x25\x15\x17\x58\xe3\x27\xb9\xe0\xaa\x51\xec\xf2\xcb\x07\x59\xf5\xb4\x7f\xda\xb3\x6d\x1d\x60\xab\x20\x36\xa5\xe6\xa5\x20\x5c\x0f\xe3\x02\x02\x00\x00\xff\xff\x6d\xc0\xa1\xcc\x07\x01\x00\x00")

func resConfirmTplBytes() ([]byte, error) {
	return bindataRead(
		_resConfirmTpl,
		"res/confirm.tpl",
	)
}

func resConfirmTpl() (*asset, error) {
	bytes, err := resConfirmTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/confirm.tpl", size: 263, mode: os.FileMode(420), modTime: time.Unix(1483605694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func resFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_resFaviconIco,
		"res/favicon.ico",
	)
}

func resFaviconIco() (*asset, error) {
	bytes, err := resFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/favicon.ico", size: 6518, mode: os.FileMode(436), modTime: time.Unix(1484117903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcd\x6a\xe3\x30\x14\x85\xf7\x7a\x0a\x21\x86\x59\x46\xcc\x64\x39\x8a\x66\x3d\x8b\x99\xc5\xbc\x80\x91\xab\x9b\xd8\xe0\xd8\xc1\x52\x52\x8a\xd0\xb6\x84\x42\x48\x4a\x4b\x4b\x69\x16\x09\x14\x9a\x55\xda\x5d\x28\xfd\x79\x9a\xda\x4e\xde\xa2\xd8\xf9\x6b\x48\x08\xa1\x1b\xc3\xf5\x91\xee\x77\xee\xd1\x35\x46\x42\xd5\x0f\x01\x13\x37\x92\x27\xc4\x5a\xc4\xa4\xdf\xc2\x47\x81\x50\xaa\x42\xdc\xa6\xd6\x51\x48\x38\x62\x02\x7b\x31\x54\x2b\x84\x3a\x4e\xcd\xd7\xd5\x20\x3a\x76\x1c\xda\x54\x10\x2b\xc2\xb3\xcb\x51\xda\x9e\x64\xe3\x61\xd6\x3b\x65\x54\x70\xc4\xa8\xf4\x5b\x1c\x15\xad\x38\x62\x5e\x99\xcf\x86\x4f\xd9\xed\x38\x69\x5f\x4f\x87\x23\x46\xbd\x32\x47\x4c\x0b\x37\x80\x25\xa8\x28\x72\x8e\x8e\x39\xc2\x18\x63\xa6\xbd\x95\xe6\xfd\x20\x3c\xe9\x75\xb2\xfb\x47\x46\xb5\xb7\x43\xff\x49\x78\xda\xed\xa6\xfd\x87\x3d\xfa\x45\xe7\xfd\xb5\x3f\xd7\x19\xcd\x29\xc8\x98\x58\x84\x35\xc0\xdf\x4a\xff\xa1\x11\x29\x6b\x17\x17\x17\x0e\xe6\x85\x5c\x76\x09\x45\x1d\x08\x37\xa6\xf4\x4f\xd4\xc1\x5a\x46\xb5\xdc\x38\x97\x4b\x7f\x41\x29\x51\xdb\xa9\xae\x8a\xe2\xc7\xce\x34\x63\x68\x44\x20\x7d\xfd\x3b\xf6\x65\xc5\x98\xd2\x1f\x69\x2d\xe1\xd9\xcb\xd5\xf4\xed\xbc\x88\xf5\x73\x8b\xef\xa1\xab\x1a\xbf\xb6\xbf\x07\x72\x24\x04\x9b\x98\xa4\x3d\x98\xdd\xdc\x6d\x60\xd6\x43\xcc\x03\x33\x06\x42\x69\x2d\x3a\x20\xa6\xed\xf9\xbf\x9c\x88\x90\x92\xf0\x74\xf2\x9c\x9c\x0d\xf6\xba\xcb\x5f\x35\x5f\xa2\xf5\xf6\x2d\xfd\x7e\x04\x00\x00\xff\xff\x7f\x8b\x46\xd9\xe3\x02\x00\x00")

func resIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_resIndexTpl,
		"res/index.tpl",
	)
}

func resIndexTpl() (*asset, error) {
	bytes, err := resIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/index.tpl", size: 739, mode: os.FileMode(420), modTime: time.Unix(1484118235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resLayoutTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\xaf\xd3\x30\x10\x3c\x3f\xff\x8a\x25\x0f\x6e\xa4\x71\x9f\x5a\x15\xb9\x6e\x2e\x85\x33\x1c\x7a\xe1\x84\x9c\x78\x9b\x58\x72\xec\xe0\x6c\xa0\x25\xca\x7f\x47\x89\x13\x54\xb8\x20\xc4\xc9\xfb\x31\xb3\x3b\xb6\x47\xbe\x7a\xff\xf1\x7c\xf9\xfc\xe9\x03\xd4\xd4\xd8\x9c\xc9\xf5\x40\xa5\x73\xf6\x24\x1b\x24\x05\x35\x51\x9b\xe2\xd7\xde\x7c\x3b\x25\x67\xef\x08\x1d\xa5\x97\x7b\x8b\x09\x94\x31\x3b\x25\x84\x37\xca\x26\xee\x11\xca\x5a\x85\x0e\xe9\xd4\xd3\x35\x7d\x97\xe4\x0c\x00\x40\x76\x74\xb7\x98\xb3\xc2\xeb\xfb\x30\x57\x5a\xa5\xb5\x71\x95\xe0\xc7\x39\x6d\x54\xa8\x8c\x13\xfb\xf6\x76\x64\x23\x63\x1b\x52\x85\x45\x88\xd0\xef\x46\x53\x2d\xb6\x9c\xbf\x89\xd8\xc2\x07\x8d\x21\x2d\xbd\xb5\xaa\xed\x50\xac\xc1\xc4\x5c\x88\xa4\xdf\xc2\x1a\xd6\xc3\x03\x4b\x6c\xdb\x1b\x74\xde\x1a\x0d\xcf\x87\xc3\x21\x52\xea\xed\xe3\xa2\x17\xce\xa3\x8a\x0d\xd5\xbb\x3f\x14\xfc\x6a\xec\x7f\x6b\xec\xf9\xaa\xbb\xec\x43\x40\x47\xb0\x71\xaa\xc1\x88\x29\xbd\xf5\x41\x54\x01\xd1\x2d\x18\xef\xae\x26\x34\x5f\x9a\xae\x8a\x88\xe9\xf1\x52\x65\x4d\xe5\x44\x89\x8e\x30\xc4\x7b\x5e\xbd\xa3\xb4\x33\x3f\x50\xbc\xec\x96\xc5\x2b\xb5\xe8\x89\xbc\xfb\x3f\x36\xa8\x47\x7d\xcf\x9c\x2f\x5f\x31\xcf\xd3\x58\xfa\xa0\xc8\x78\x27\x9c\x77\x18\x85\xff\x65\xeb\xb8\x22\xfe\x79\xf2\x6c\x91\x6c\xf1\x88\xcc\xa2\xf9\xe4\x64\x96\x9c\x3d\x0d\x03\x61\xd3\x5a\x45\x08\xc9\x54\x4a\xe0\xf5\x38\x32\x99\xc5\xb6\xcc\xa2\x63\x7f\x06\x00\x00\xff\xff\x2f\x2f\x03\x47\xc9\x02\x00\x00")

func resLayoutTplBytes() ([]byte, error) {
	return bindataRead(
		_resLayoutTpl,
		"res/layout.tpl",
	)
}

func resLayoutTpl() (*asset, error) {
	bytes, err := resLayoutTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/layout.tpl", size: 713, mode: os.FileMode(420), modTime: time.Unix(1482721040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resRepoaddTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xbb\x4e\xf3\x30\x14\xc7\x77\x3f\x85\x75\x86\x6f\xf5\x03\x7c\x8e\x5f\x25\x72\x6a\x87\x5a\x4a\x6c\x2b\xb6\x0b\x55\x94\x15\x75\x01\x3a\x40\x55\x81\x18\xba\x20\x16\xca\xc2\x65\x01\xf1\x32\xa4\xa1\x13\xaf\x80\xd2\xa4\xe2\xd2\x2e\x47\xbe\xfc\x7f\x3f\xd9\xe7\x94\xa5\x90\xa9\xd2\x12\x43\x62\xc4\x18\xaa\x0a\x51\xa1\x46\x78\x90\x71\xe7\x22\x48\x82\xf7\x46\x03\x43\x94\xe3\x61\x21\xd3\x08\x08\xb0\xf5\xcd\x6c\xbd\x78\xa4\x84\xff\x3c\x8e\xe3\x03\xe5\xd3\xcc\x1c\xc6\x31\x09\x4e\x16\x0e\x58\x73\x7e\xbb\x9a\x3c\x37\xcb\x45\x33\x3d\xee\xd2\x44\xa8\x11\x43\x88\xa6\xa6\xc8\x31\x1f\x78\x65\xf4\x1f\xb4\x90\xd6\x70\x21\x62\x61\x00\xe7\xd2\x0f\x8d\x88\xc0\x1a\xe7\xdb\x27\x6c\x60\x6a\x19\xcd\x78\x22\x33\x9c\x9a\x22\x02\xcd\x73\x09\xac\xb9\x5a\xd6\xaf\x17\xf5\xf4\xe4\xf3\xe5\x92\x92\xcd\x35\xa3\x4a\xdb\xe0\xb1\x12\x7d\x08\xb7\x75\xbb\xf6\x63\x2b\x23\xf0\xf2\xc8\x03\x26\x8c\x12\xbb\x23\xe6\x89\x09\x1e\xd8\xc7\xfd\xc3\x6a\x7e\xba\x5f\xdb\x45\x7a\x6f\xbf\xd9\x27\xde\xfe\xba\x23\xbb\x84\x0b\x49\xae\xbe\xe1\x81\x07\x3c\xe2\x59\x90\x11\xbc\xbf\x5d\xd7\x77\xf3\x96\x46\xff\x74\xe2\xec\xff\xdd\xfa\x6b\x1a\xf5\xd9\x6c\xf5\x34\xd9\xf4\x17\x51\xd2\x76\x96\x21\x54\x96\x52\x8b\xaa\x42\x5f\x01\x00\x00\xff\xff\xdb\x74\x69\xaf\xde\x01\x00\x00")

func resRepoaddTplBytes() ([]byte, error) {
	return bindataRead(
		_resRepoaddTpl,
		"res/repoadd.tpl",
	)
}

func resRepoaddTpl() (*asset, error) {
	bytes, err := resRepoaddTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/repoadd.tpl", size: 478, mode: os.FileMode(420), modTime: time.Unix(1484116352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resRepoeditTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xbf\xee\xd3\x30\x10\xc7\x77\x3f\x85\x75\x42\x8c\xf5\x03\xe0\x78\x67\x80\x81\x17\x88\x9c\xfa\xd2\x5a\x4a\x6c\x2b\x76\x0a\x55\x94\x15\x75\x01\x3a\x40\x55\x81\x18\xba\x20\x16\xca\xc2\x9f\x05\xc4\xcb\x90\x86\x4e\xbc\x02\xca\x1f\xd4\xf6\xd7\x9f\x7e\x8b\x75\xb6\xbf\xf7\xfd\x9c\xee\xae\xaa\x14\xa6\xda\x20\x85\xc4\xaa\x25\xd4\x35\xe1\x4a\x2f\xe8\x34\x93\xde\x47\x90\x94\x21\x58\x03\x82\x70\x49\xe7\x05\xa6\x11\x30\x10\xc7\x0f\x9b\xe3\xee\x2b\x67\xf2\xfc\x39\x8e\x67\x3a\xa4\x99\x7d\x1a\xc7\xac\xf4\x58\x78\x10\xed\xeb\x8f\x87\xd5\xf7\x76\xbf\x6b\xd7\xcf\x07\x35\x53\x7a\x21\x08\xe1\xa9\x2d\x72\x2a\xa7\x41\x5b\x73\x23\xb5\x40\x67\x51\xe9\x10\x2b\x0b\x34\xc7\x30\xb7\x2a\x02\x67\x7d\xe8\x6a\xd0\xc6\x95\x81\x6a\x15\x41\xa1\x15\x50\x23\x73\x1c\xc3\xb0\x74\x18\xc1\x5c\x2b\x85\x06\xe8\x42\x66\x25\x46\x50\x55\xf7\x26\x4f\xd0\xd9\xc9\x43\x55\xd7\x40\x59\x47\xee\x0b\xe0\x4e\xf0\x4c\x26\x98\xd1\xd4\x16\x11\x74\x3e\x20\xda\x77\xfb\xe6\xe7\x9b\x66\xfd\xe2\xef\x8f\xb7\x9c\xf5\xdf\xe2\x8c\xd8\x8b\x46\xe4\x10\x0f\xcc\x80\xcf\xc2\x35\xf1\xb1\xcc\x71\x60\x72\xe6\xae\x80\x32\xb1\x65\x00\xf1\xe7\xf3\x97\xc3\xf6\xe5\xed\xb8\x41\x32\xf2\xc6\xcb\x5d\xc0\x47\xe8\xbd\x9c\x5d\x30\xff\x37\x7b\x30\x1d\x92\x7d\x99\xe4\xfa\xe4\x3b\x3d\x39\xfd\xfe\xf5\xbe\xf9\xb4\xed\xbb\x74\xdf\x24\xde\x3d\xb8\x3e\x2f\x96\xa0\x79\xb5\x39\x7c\x5b\xf5\x63\x25\x9c\x75\x03\x15\x84\x54\x15\x1a\x55\xd7\xe4\x5f\x00\x00\x00\xff\xff\x18\xb3\xe6\xe7\x55\x02\x00\x00")

func resRepoeditTplBytes() ([]byte, error) {
	return bindataRead(
		_resRepoeditTpl,
		"res/repoedit.tpl",
	)
}

func resRepoeditTpl() (*asset, error) {
	bytes, err := resRepoeditTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/repoedit.tpl", size: 597, mode: os.FileMode(420), modTime: time.Unix(1484118295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resUseraddTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x93\x4f\x6b\x14\x31\x18\xc6\xef\xf3\x29\x42\x28\x1e\x37\x94\xde\x6a\x26\xe0\xd1\x8b\x07\xaf\x22\x4b\x66\x93\xed\x04\x67\x26\xc3\x24\xb3\x6d\x09\x73\x10\xa1\xf4\x22\xae\x20\x65\x55\x0a\xee\xa5\x78\xb1\x3d\xa9\x08\x82\x5f\xc6\xd9\x61\x4f\x7e\x05\x49\x32\x99\x8e\x76\xf5\xb2\x9b\x3f\xcf\xfb\xfc\xde\x3c\x99\x18\xc3\xf8\x5c\x14\x1c\xc0\x44\xb2\x53\xd8\x34\x11\x66\x62\x01\x66\x19\x55\x2a\x86\x49\xad\xb5\x2c\x20\x89\x30\x05\x69\xc5\xe7\x31\x44\x90\x6c\xaf\x2e\xb6\xeb\xcf\x18\xd1\xf1\xf2\x74\x7a\x24\xf4\x3c\x93\xc7\xd3\x29\xaa\x15\xaf\x14\x24\xdd\x9b\x8f\x9b\xf3\xaf\xdd\xf5\xba\x5b\x9e\x79\x35\x62\x62\x41\xa2\x08\xcf\x65\x95\x03\x3a\xd3\x42\x16\x3b\x4a\x29\x63\x53\x26\x21\xc8\xb9\x4e\x25\x8b\x61\x29\x95\xb6\x2d\xb8\x62\x5c\x12\x9c\xd1\x84\x67\x60\x2e\xab\x18\x5a\x7d\x20\xb5\xcb\x97\xbf\xbe\xbf\xc3\xc8\x6d\x13\x2c\x8a\xb2\xd6\x40\xb0\x5e\x04\x0a\x9a\xf3\x30\xd6\xa7\x25\x8f\xa1\xe6\x27\x1a\x02\x44\x30\x2a\xef\x18\x97\x54\x29\x48\xda\x9b\xb3\xee\xc3\xf3\xdd\xae\x4e\xd1\xbb\xfa\xb1\x77\xb5\xe3\x63\x59\xb1\x7f\x39\x0b\x45\x59\x2e\x0a\x48\x36\xab\x9b\x76\x79\xe5\xf3\x69\x5f\xaf\x76\x53\x82\xba\x07\x0d\x53\xcf\x9a\xa5\x7c\xf6\x2c\x91\x27\x10\x2c\x68\x56\xf3\x18\xee\xdf\x52\x43\xd8\x3e\xb6\xf4\x80\x6c\x2e\x5f\x6c\xdf\x2e\xc3\x7d\xa4\x07\x24\xc2\x9a\x26\x19\x0f\x97\xed\x26\x36\x68\x5d\x91\x08\x00\x00\xb0\x4e\x87\xbd\x74\x1f\x92\xed\xfa\x5b\xf7\xfe\x1a\x23\x9d\xfa\x7d\x63\x2a\x5a\x1c\x71\xb0\x37\x79\x5c\x67\x5c\x35\x4d\xa8\x22\xc6\x4c\x1e\x24\xb2\xd6\x4d\x33\x56\xf3\x82\xd9\xef\x0b\x59\xff\x68\x54\xcc\x4b\x19\x8a\x8d\xd9\xab\x78\x29\x0f\xe3\xc9\xe0\xd6\x37\xe3\x27\x2c\x34\x64\xe3\x80\x96\xf3\x88\xe6\xdc\x61\xd8\xad\x6e\x77\x63\xbd\x43\x48\xf7\xef\x04\xfb\x9b\xe4\x55\xae\x9e\x3c\x1d\x02\xed\x1b\x9a\x3c\x64\x4d\x73\x68\x8c\xfb\xf7\x19\xff\x09\xf4\x67\x73\x08\x77\xbe\xb0\x62\x8f\x6b\x73\x1d\x5d\xc8\x18\xaf\xea\x24\x17\x3a\xc0\xe9\x4c\x0f\xe0\x9f\x3f\x2e\xdb\x4f\x2b\x8b\x8a\xee\x15\x89\x2a\xef\xdf\xfd\xfd\xff\xf3\x6b\x5f\x5d\x6c\xbe\x9c\xbb\x87\x17\x61\x64\x9f\x9c\x4b\xdd\xb7\xf5\x3b\x00\x00\xff\xff\xe5\xca\x2a\x09\xf7\x03\x00\x00")

func resUseraddTplBytes() ([]byte, error) {
	return bindataRead(
		_resUseraddTpl,
		"res/useradd.tpl",
	)
}

func resUseraddTpl() (*asset, error) {
	bytes, err := resUseraddTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/useradd.tpl", size: 1015, mode: os.FileMode(420), modTime: time.Unix(1483668790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resUsereditTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4f\x8b\xd4\x3e\x18\xbe\xf7\x53\x84\x30\xfc\x8e\x53\x96\xbd\xed\x2f\x0d\x78\xf4\x22\x22\x78\x12\x19\xd2\xc9\x3b\xdb\x60\xdb\x94\x26\xdd\x3f\x84\x1e\x44\x58\xf6\x22\x8e\x20\xcb\xaa\x2c\xb8\x97\xc5\x8b\xbb\x27\x15\x41\xf0\xcb\xd8\x19\xe6\xe4\x57\x90\x24\xcd\x6c\x75\xc6\xbd\x94\xa4\x79\xde\xf7\x79\xfa\x3c\x6f\x63\x0c\x87\x99\x28\x01\xe1\x54\xf2\x63\xdc\xb6\x11\xe1\xe2\x00\x4d\x73\xa6\x54\x82\xd3\x46\x6b\x59\x62\x1a\x11\x86\xb2\x1a\x66\x09\x8e\x31\x5d\x5d\x9d\xad\x2e\x3f\x93\x98\x0d\x5f\x4f\x26\xfb\x42\xcf\x72\x79\x38\x99\xc4\x8d\x82\x5a\x61\xba\x7c\xf3\x71\x71\xfa\x75\x79\x7d\xb9\x9c\x9f\x78\x74\xcc\xc5\x01\x8d\x22\x32\x93\x75\x81\xd8\x54\x0b\x59\x6e\x29\x05\x2e\xf4\x84\x4b\x8c\x0a\xd0\x99\xe4\x09\xae\xa4\xd2\x56\x83\x28\xab\x46\x23\xc1\x13\xdc\x08\x8e\x51\xc9\x0a\xe8\x97\xfa\xb8\x82\x04\x67\x82\x73\x28\x31\x3a\x60\x79\x03\x09\x36\x66\x34\x7e\xac\xa0\x1e\xdf\xe7\x6d\x8b\x51\x6c\x99\x9d\x00\x52\x51\x92\xb3\x14\x72\x34\x93\x75\x82\x2d\x67\x50\xdb\xcd\x5f\xfe\xfa\xfe\x8e\xc4\xee\x98\x0e\x19\x2d\x28\x50\xba\xb5\xe7\xd4\x70\xa4\x37\x19\xed\xc3\x73\x92\xb8\xda\x20\xac\x98\x52\x98\x76\x37\x27\xcb\x0f\xcf\xb7\xb3\x39\x44\xcf\xe6\xd7\x9e\xcd\xae\x0f\x65\xcd\xff\xd5\x59\x28\xc6\x0b\x51\x62\xba\x38\xbf\xe9\xe6\x57\xde\xfb\xee\xf5\xf9\x76\x96\x80\xee\x89\xd6\x5b\xcf\x35\xcd\x60\xfa\x2c\x95\x47\xeb\xaf\xdb\xc1\xc8\x18\x31\x43\xc1\x55\x0f\x47\x6d\xeb\x90\xc0\xfb\x12\xe0\xd8\x18\x28\x79\xdb\xae\x45\x86\xdc\xbd\xfb\xd9\x2e\x5d\x5c\xbc\x58\xbd\x9d\x87\xd1\xc8\x76\x69\x44\x34\x4b\x73\x08\x73\xe7\x36\x36\x72\x5d\xd3\x08\x21\x84\x88\xce\xd6\x67\xd9\x0e\xa6\xab\xcb\x6f\xcb\xf7\xd7\x24\xd6\x99\x3f\x37\xa6\x66\xe5\x3e\xa0\xd1\xf8\x51\x93\x83\x6a\xdb\x50\x45\x8d\x19\xdf\x4b\x65\xa3\xdb\x76\x88\x76\xfa\x22\x12\xdb\xfe\xd1\xa0\x18\x2a\x19\x8a\x8d\x19\xd5\x50\xc9\xbd\x64\xbc\xee\xd6\x8b\xf1\x1b\x1e\x04\x59\xf7\xb0\xe5\x79\xc0\x0a\x70\x34\xfc\x16\xb7\x5d\x58\xdf\x21\x84\xf1\xb7\xe1\x7d\xf0\x50\x17\xea\xc9\xd3\xe1\x74\x59\x41\x6e\x9c\xf7\x8c\xe9\xc7\xda\x45\x22\x4a\x0e\x47\x68\x34\x7e\x68\x4b\x50\x80\x21\x07\xb9\x33\x9d\x3f\xa5\x7a\x57\x9c\x38\xe7\x4c\x78\x63\x8d\xb2\x89\x0c\xa2\x1c\x0a\x57\x4d\x5a\x08\x1d\x64\xb3\xe9\xed\x0f\xf1\xf3\xc7\x45\xf7\xe9\xdc\xfd\x7b\xff\x95\xa9\xaa\xfe\xdf\x7c\xde\x7d\x87\x74\xaf\xce\x16\x5f\x4e\xdd\xed\x11\x91\xd8\xde\x1b\x2e\x2f\x2f\xeb\x77\x00\x00\x00\xff\xff\xa3\x74\x9f\x70\xbc\x04\x00\x00")

func resUsereditTplBytes() ([]byte, error) {
	return bindataRead(
		_resUsereditTpl,
		"res/useredit.tpl",
	)
}

func resUsereditTpl() (*asset, error) {
	bytes, err := resUsereditTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/useredit.tpl", size: 1212, mode: os.FileMode(420), modTime: time.Unix(1483668474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resUsersTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x4a\x3b\x31\x10\xc7\xef\x79\x8a\x10\x7e\xfc\x8e\x0d\xda\xa3\xe9\x78\xf6\x01\x3c\x2f\x59\x27\x6d\x02\x6b\x2a\x9b\xb4\x22\x21\xf7\x22\x78\x10\xa5\x22\x78\x68\x41\xa4\x2f\x20\x3d\xf8\xe7\x69\xec\xbf\xb7\x90\xdd\x76\x5b\x8b\x22\xc5\xcb\xc2\xec\xcc\x7c\xbe\x33\xf3\x4d\x08\xa8\x9a\xc6\x2a\xca\xd2\x36\x5e\xb0\x18\x89\x40\xd3\xa5\x27\x99\x74\xae\xc1\xd2\x8e\xf7\x6d\xcb\x80\x08\x49\x75\xae\x9a\x0d\xc6\x19\x2c\x9e\xfa\x8b\xe1\xb3\xe0\x12\x88\xe0\x68\xba\x40\xca\x1e\x20\x42\xd7\x61\x76\x3b\x9a\xf6\xc6\x93\xde\xdd\x7c\x38\x12\x5c\xd7\x81\x08\x2f\xd3\x4c\x55\xc4\x32\x28\x80\x3e\x07\x42\x29\xa5\xc2\xeb\x75\x4e\xef\xb1\x15\x40\x70\xaf\x7f\xc8\xef\x33\x98\xde\x5c\x7d\xbc\x3d\x2c\xf3\x82\x17\x14\x12\x42\x2e\x6d\x4b\xd1\x7f\xb5\x63\xa7\x72\x17\xe3\xaa\x71\xa5\xb0\x0c\xb0\xa2\x58\x79\xaa\x18\x84\x50\x16\xc7\x28\xb8\xc7\xad\xba\x4d\x50\xfe\x58\x2f\x9e\x24\x2d\xe3\x9b\x59\xfb\x3c\x49\x78\xc7\xa9\x5c\xa1\xf1\x87\x1d\x83\x8d\x10\x6a\x47\x18\x23\x83\xd9\x6b\x7f\xfe\x7e\x5d\x1e\xe6\x2b\xe2\xbf\x4d\xdd\xd9\xc1\xf7\xef\x8e\x3a\xa8\xb2\x6d\x99\x49\x6f\xb0\xb8\x7f\xdc\x92\xd9\x2c\xb1\x3c\x49\x08\xca\xe2\x4e\x77\xf8\xf3\xfa\x12\x91\xc1\x74\xfc\x32\xb9\x1c\x54\x96\xfd\x32\x50\x61\x55\xe1\xfc\xe6\xc9\x54\x23\x7e\x06\x00\x00\xff\xff\x28\xb7\xfd\x76\x81\x02\x00\x00")

func resUsersTplBytes() ([]byte, error) {
	return bindataRead(
		_resUsersTpl,
		"res/users.tpl",
	)
}

func resUsersTpl() (*asset, error) {
	bytes, err := resUsersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/users.tpl", size: 641, mode: os.FileMode(420), modTime: time.Unix(1483274272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/confirm.tpl": resConfirmTpl,
	"res/favicon.ico": resFaviconIco,
	"res/index.tpl": resIndexTpl,
	"res/layout.tpl": resLayoutTpl,
	"res/repoadd.tpl": resRepoaddTpl,
	"res/repoedit.tpl": resRepoeditTpl,
	"res/useradd.tpl": resUseraddTpl,
	"res/useredit.tpl": resUsereditTpl,
	"res/users.tpl": resUsersTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"confirm.tpl": &bintree{resConfirmTpl, map[string]*bintree{}},
		"favicon.ico": &bintree{resFaviconIco, map[string]*bintree{}},
		"index.tpl": &bintree{resIndexTpl, map[string]*bintree{}},
		"layout.tpl": &bintree{resLayoutTpl, map[string]*bintree{}},
		"repoadd.tpl": &bintree{resRepoaddTpl, map[string]*bintree{}},
		"repoedit.tpl": &bintree{resRepoeditTpl, map[string]*bintree{}},
		"useradd.tpl": &bintree{resUseraddTpl, map[string]*bintree{}},
		"useredit.tpl": &bintree{resUsereditTpl, map[string]*bintree{}},
		"users.tpl": &bintree{resUsersTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

