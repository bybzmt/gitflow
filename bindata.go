// Code generated by go-bindata.
// sources:
// res/.index.tpl.swp
// res/confirm.tpl
// res/favicon.ico
// res/gitflow.sql
// res/index.tpl
// res/layout.tpl
// res/repoadd.tpl
// res/repoedit.tpl
// res/useradd.tpl
// res/useredit.tpl
// res/users.tpl
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// resIndexTplSwp reads file data from disk. It returns an error on failure.
func resIndexTplSwp() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/.index.tpl.swp"
	name := "res/.index.tpl.swp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resConfirmTpl reads file data from disk. It returns an error on failure.
func resConfirmTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/confirm.tpl"
	name := "res/confirm.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resFaviconIco reads file data from disk. It returns an error on failure.
func resFaviconIco() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/favicon.ico"
	name := "res/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resGitflowSql reads file data from disk. It returns an error on failure.
func resGitflowSql() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/gitflow.sql"
	name := "res/gitflow.sql"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resIndexTpl reads file data from disk. It returns an error on failure.
func resIndexTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/index.tpl"
	name := "res/index.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resLayoutTpl reads file data from disk. It returns an error on failure.
func resLayoutTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/layout.tpl"
	name := "res/layout.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resRepoaddTpl reads file data from disk. It returns an error on failure.
func resRepoaddTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/repoadd.tpl"
	name := "res/repoadd.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resRepoeditTpl reads file data from disk. It returns an error on failure.
func resRepoeditTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/repoedit.tpl"
	name := "res/repoedit.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resUseraddTpl reads file data from disk. It returns an error on failure.
func resUseraddTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/useradd.tpl"
	name := "res/useradd.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resUsereditTpl reads file data from disk. It returns an error on failure.
func resUsereditTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/useredit.tpl"
	name := "res/useredit.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resUsersTpl reads file data from disk. It returns an error on failure.
func resUsersTpl() (*asset, error) {
	path := "/home/by/Documents/go/gitflow/res/users.tpl"
	name := "res/users.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/.index.tpl.swp": resIndexTplSwp,
	"res/confirm.tpl": resConfirmTpl,
	"res/favicon.ico": resFaviconIco,
	"res/gitflow.sql": resGitflowSql,
	"res/index.tpl": resIndexTpl,
	"res/layout.tpl": resLayoutTpl,
	"res/repoadd.tpl": resRepoaddTpl,
	"res/repoedit.tpl": resRepoeditTpl,
	"res/useradd.tpl": resUseraddTpl,
	"res/useredit.tpl": resUsereditTpl,
	"res/users.tpl": resUsersTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		".index.tpl.swp": &bintree{resIndexTplSwp, map[string]*bintree{}},
		"confirm.tpl": &bintree{resConfirmTpl, map[string]*bintree{}},
		"favicon.ico": &bintree{resFaviconIco, map[string]*bintree{}},
		"gitflow.sql": &bintree{resGitflowSql, map[string]*bintree{}},
		"index.tpl": &bintree{resIndexTpl, map[string]*bintree{}},
		"layout.tpl": &bintree{resLayoutTpl, map[string]*bintree{}},
		"repoadd.tpl": &bintree{resRepoaddTpl, map[string]*bintree{}},
		"repoedit.tpl": &bintree{resRepoeditTpl, map[string]*bintree{}},
		"useradd.tpl": &bintree{resUseraddTpl, map[string]*bintree{}},
		"useredit.tpl": &bintree{resUsereditTpl, map[string]*bintree{}},
		"users.tpl": &bintree{resUsersTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

